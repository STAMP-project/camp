pipeline {
    
    agent any
    
    stages {
    
    stage('Pull SCM sut'){
        steps{
            git (credentialsId: 'git-credentials',  url: 'https://gitlab.atosresearch.eu/ari/stamp_docker_citygoApp', branch: 'master')
        }
    }
    stage('Run CAMP'){
        steps{
            sh '''
            docker pull fchauvel/camp:dev;
            docker run -d -u root -i -t --name camp -v /var/run/docker.sock:/var/run/docker.sock -v /var/jenkins_home/workspace/citygo_case2_camp/:/stamp_docker_citygoApp/ -t fchauvel/camp:dev
        '''
        }
    }
    stage('CAMP generate'){
        steps{
            sh '''
            docker exec -d camp sh -c 'rm /stamp_docker_citygoApp/apache/app/Dockerfile && cp -R /stamp_docker_citygoApp/nginx/ARTIST/app/* ./samples/stamp/atos/functional/template/citygo/';
            docker exec -i camp sh -c 'cd samples/stamp/atos/functional/ && camp generate -d . --all';
            exit;
        '''
        }
    }
    stage('CAMP realize'){
        steps{
            sh '''
            docker exec -i camp sh -c 'cd samples/stamp/atos/functional/ && camp realize -d . && cp -R out/ /stamp_docker_citygoApp/';
            exit;
        	'''
        }
    }
    stage('CAMP execute'){
        steps{
            sh '''
            docker exec -i camp sh -c 'cd samples/stamp/atos/functional/ && camp execute -d .';
            exit;
        '''
        }
    }
    stage('Publish reports') {
      steps {
        script {
          def BUILD_ID= ""
          BUILD_ID = env.BUILD_ID
          sh '''
                docker exec -i -e BUILD_ID="${BUILD_ID}" camp sh -c 'cd /stamp_docker_citygoApp/out/ && mkdir $BUILD_ID && 
		cp -R /camp/samples/stamp/atos/functional/out/* /stamp_docker_citygoApp/out/$BUILD_ID/ && 
		cp /camp/samples/stamp/atos/functional/camp_execute.log /stamp_docker_citygoApp/out/$BUILD_ID/ && exit';
                ls -d /var/jenkins_home/workspace/citygo_case2_camp/out/$BUILD_ID/*/ > reportDirNames.txt;
                exit;
            '''
          def reportDirectories = readFile('reportDirNames.txt').split("\\r?\\n")
          sh 'rm -f reportDirNames.txt'
          for (i = 0; i < reportDirectories.size(); i++) {
            publishHTML (target: [
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true, 
              reportDir: reportDirectories[i] + '/test-reports/nginx-logs/',
              reportFiles: 'error.log','pytest_report.html',
              reportName: reportDirectories[i].tokenize('/').last()
            ])
          }
          sh '''
            docker stop camp && docker rm camp   
          '''
        }
      }
    }
  }
}
