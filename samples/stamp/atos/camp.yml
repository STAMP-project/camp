#
# CAMP
#
# Copyright (C) 2017, 2018 SINTEF Digital
# All rights reserved.
#
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.
#

goals:
  running:
    - web

components:

  web:
    provides_services: [ web ]
    requires_services: [ Postgres ]
    requires_features: [ Python ]
    variables:
      thread_limit:
        type: Integer
        values: [64, 128]
        realization:
          - targets: [ docker-compose.yml ]
            pattern: "ThreadLimit=64"
            replacements:
              - ThreadLimit=64
              - ThreadLimit=128
      threads_per_child:
        type: Integer
        values:
          range: [0, 128]
          realization:
          - targets: [ docker-compose.yml ]
            pattern: "ThreadsPerChild=25"
            replacements:
              - ThreadsPerChild=64
      max_request_workers:
        type: Integer
        values: [0,150]
        realization:
          - targets: [ docker-compose.yml ]
            pattern: "MaxRequestWorkers=150"
            replacements:
              - MaxRequestWorkers=150
      implementation:
        values: [apache, nginx]
        realization:
          - select:
            - docker-compose-apache.yml
            - docker-compose-nginx.yml
            as: docker-compose.yml
      command: python manage.py migrate --no-input && gunicorn citygo_settings.wsgi:application -b 0.0.0.0:80 --workers 3
      
    nginx:
      provides_services: [ nginx ]
     
      variables:
        worker_connections:
          type: Integer
          values:
            range: [2, 1024]
          realization:
            - targets: [docker-compose.yml]
              pattern: "worker_connections=1024"
              replacements: 
                - worker_connections=64
        gzip:
          values:
            [on, off]
          realization:
            - targets: [ docker-compose.yml ]
              pattern: "gzip=on"
              replacements:
                - gzip=off

        implementation:
        values: [apache, nginx]
        realization:
          - select:
            - docker-compose-apache.yml
            - docker-compose-nginx.yml
            as: docker-compose.yml


  python:
    provides_features: [ Python ]
    implementation:
      docker:
        image: python:2.7
        
  postgres:
    provides_services: [ Postgres ]
    requires_features: [ Ubuntu ]
     implementation:
        values: [apache, nginx]
        realization:
          - select:
            - docker-compose-apache.yml
            - docker-compose-nginx.yml
            as: docker-compose.yml
 
  ubuntu:
    provides_features: [ Ubuntu ]
    implementation:
      docker:
        image: ubuntu:latest

  

constraints:
#   # thread_per_child < thread_limit
 - showcase_0_threads_per_child.value < showcase_0_thread_limit.value
#   - CInstance.forall(ci, ci.configuration.exists(val1, Implies(val1.variable == variable("showcase", "threads_per_child"), ci.configuration.exists(val2, And([val2.variable == variable("showcase", "thread_limit"), val1.value < val2.value])))))
   # MaxRequest_workers < 16 * ThreadsPerChild
 - showcase_0_max_request_workers.value == 16 * showcase_0_threads_per_child.value  
#   - CInstance.forall(ci, ci.configuration.exists(val1, Implies(val1.variable == variable("showcase", "max_request_workers"), ci.configuration.exists(val2, And([val2.variable == variable("showcase", "threads_per_child"), val1.value < 16 * val2.value])))))
#   # Or(ThreadsPerChild >= 100 and MaxRequest_workers >= 200,
#   # ThreadLimit <= 64, max_request_workers >=2
 - Or([And([showcase_0_threads_per_child.value >= 100, showcase_0_max_request_workers.value >= 200]), And([showcase_0_thread_limit.value <= 64, showcase_0_max_request_workers.value >= 2])])  
#   - Or([CInstance.forall(ci, ci.configuration.exists(val1, Implies(val1.variable == variable("showcase", "threads_per_child"), ci.configuration.exists(val2, And([val2.variable == variable("showcase", "max_request_workers"), val1.value >= 100, val2.value >= 200]))))), CInstance.forall(ci, ci.configuration.exists(val1, Implies(val1.variable == variable("showcase", "thread_limit"), ci.configuration.exists(val2, And([val2.variable == variable("showcase", "max_request_workers"), val1.value <= 64, val2.value >= 2])))))])
