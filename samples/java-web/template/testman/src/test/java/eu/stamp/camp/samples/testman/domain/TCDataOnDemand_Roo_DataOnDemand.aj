// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package eu.stamp.camp.samples.testman.domain;

import eu.stamp.camp.samples.testman.domain.TC;
import eu.stamp.camp.samples.testman.domain.TCDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect TCDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TCDataOnDemand: @Component;
    
    private Random TCDataOnDemand.rnd = new SecureRandom();
    
    private List<TC> TCDataOnDemand.data;
    
    public TC TCDataOnDemand.getNewTransientTC(int index) {
        TC obj = new TC();
        setExpectedResult(obj, index);
        setSteps(obj, index);
        setSummary(obj, index);
        setTcId(obj, index);
        return obj;
    }
    
    public void TCDataOnDemand.setExpectedResult(TC obj, int index) {
        String expectedResult = "expectedResult_" + index;
        obj.setExpectedResult(expectedResult);
    }
    
    public void TCDataOnDemand.setSteps(TC obj, int index) {
        String steps = "steps_" + index;
        obj.setSteps(steps);
    }
    
    public void TCDataOnDemand.setSummary(TC obj, int index) {
        String summary = "summary_" + index;
        obj.setSummary(summary);
    }
    
    public void TCDataOnDemand.setTcId(TC obj, int index) {
        String tcId = "tcId_" + index;
        obj.setTcId(tcId);
    }
    
    public TC TCDataOnDemand.getSpecificTC(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TC obj = data.get(index);
        Long id = obj.getId();
        return TC.findTC(id);
    }
    
    public TC TCDataOnDemand.getRandomTC() {
        init();
        TC obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return TC.findTC(id);
    }
    
    public boolean TCDataOnDemand.modifyTC(TC obj) {
        return false;
    }
    
    public void TCDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TC.findTCEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TC' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TC>();
        for (int i = 0; i < 10; i++) {
            TC obj = getNewTransientTC(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
